import E2::*;

module e2_top #() (
    clk    : input  clock   ,
    rst    : input  reset   ,
    led    : output logic<5>,
    btn1   : input  logic<1>, // 0: pressed, 1: not pressed
    btn2   : input  logic<1>, // 0: pressed, 1: not pressed
    uart_tx: output logic<1>, // UART transmit
    uart_rx: input  logic<1>, // UART receive
) {
    const WAIT_TIME    : u32 = 10_000_000;
    var clock_counter: u32;

    inst fetch_mem_interface: MemReadIf::<AddrWidth, DataWidth>;

    always_ff {
        if_reset {
            clock_counter = '0;

        } else {
            clock_counter = clock_counter + 1;
            if (btn1 == '0 || btn2 == '0) {
                clock_counter = 0;
            }
        }
    }

    inst core: Core (
        clk                                          ,
        rst                                          ,
        fetch_mem_interface: fetch_mem_interface.User,
    );

    inst inst_mem_ctrl: MemCtrl #(


    ) (
        clk      ,
        rst      ,
        led      ,
        btn1     ,
        btn2     ,
        uart_tx  ,
        uart_rx  ,

        fetch_mem_interface: fetch_mem_interface.Ram,
    );

}

module MemCtrl #() (
    clk    : input  clock   ,
    rst    : input  reset   ,
    led    : output logic<5>,
    btn1   : input  logic<1>, // 0: pressed, 1: not pressed
    btn2   : input  logic<1>, // 0: pressed, 1: not pressed
    uart_tx: output logic<1>, // UART transmit
    uart_rx: input  logic<1>, // UART receive

    fetch_mem_interface: modport MemReadIf::<AddrWidth, DataWidth>::Ram,
) {

    var rd_addr: logic<RamAddrWidth>;
    var rd_data: logic<DataWidth>   ;

    var tx_ready: logic<1>;
    var tx_valid: logic<1>;
    var tx_data : logic<8>;

    always_ff {
        if_reset {} else {}
    }

    always_comb {
        rd_addr                  = fetch_mem_interface.addr[2+:RamAddrWidth];
        fetch_mem_interface.data = rd_data;

        tx_valid = '0;
        tx_data  = '0;
    }

    inst inst_led: Led #(


    ) (
        clk                ,
        rst                , // '0 for reset, '1 for no reset
        i_led: rd_data[4:0],
        o_led: led         ,
    );

    inst inst_ram: Ram #(
        WORD_SIZE    : DataWidth   ,
        ADDRESS_WIDTH: RamAddrWidth,
    ) (
        clk        ,
        rst        ,
        rd_addr    ,
        rd_data    ,
        wr_addr: '0,
        wr_data: '0,
        wr_en  : '0, // Write when btn1 is pressed
    );

    inst uart: Uart #(


    ) (
        clk              ,
        rst              ,
        tx      : uart_tx,
        tx_ready         ,
        tx_valid         ,
        tx_data          ,
    );

}
